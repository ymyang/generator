package ${config.basePackageName}.controller.back.${moduleName};

import ${config.basePackageName}.service.${moduleName}.${className}Service;
import ${config.basePackageName}.param.${moduleName}.${className}QueryParam;
import ${config.basePackageName}.param.${moduleName}.${className}CreateParam;
import ${config.basePackageName}.param.${moduleName}.${className}UpdateParam;
import ${config.basePackageName}.entity.${moduleName}.${className}Entity;
import ${config.basePackageName}.dto.${moduleName}.${className}Dto;

import org.example.framework.common.ResponseEntity;
import com.baomidou.mybatisplus.core.metadata.IPage;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
#if(${shiroAnnotation}==true)
import org.apache.shiro.authz.annotation.RequiresPermissions;
#end


/**
 * ${comments}
 *
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
@Api(value = "${moduleName}.${className}Controller", tags = {"${comments}"})
@RestController("${moduleName}.Back${className}Controller")
@RequestMapping("/api/back/${moduleName}/${pathName}")
public class Back${className}Controller {

	@Autowired
	private ${className}Service ${classname}Service;

    /**
     * 列表
     */
    @ApiOperation(value = "${comments}列表", notes = "作者：${author}")
#if(${shiroAnnotation}==true)
    @RequiresPermissions("${moduleName}:${pathName}:list")
#end
    @GetMapping("/list")
    public ResponseEntity<IPage<${className}Dto>> list(${className}QueryParam param) {

        IPage<${className}Entity> pageList = ${classname}Service.page(param);

        // 多一步转换操作，因不推荐直接返回Entity
        IPage<${className}Dto> convert = pageList.convert((item)->item.copyPropertiesTo(new ${className}Dto(), false));

        return ResponseEntity.success(convert);
    }

    /**
     * 详情
     */
    @ApiOperation(value = "${comments}详情", notes = "作者：${author}")
#if(${shiroAnnotation}==true)
    @RequiresPermissions("${moduleName}:${pathName}:detail")
#end
    @GetMapping("/{${pk.attrname}}")
    public ResponseEntity<${className}Dto> detail(@PathVariable("${pk.attrname}") ${pk.attrType} ${pk.attrname}) {

        ${className}Entity ${classname} = ${classname}Service.getById(${pk.attrname});

        ${className}Dto ${classname}Dto = ${classname}.copyPropertiesTo(new ${className}Dto(), false);

        return ResponseEntity.success(${classname}Dto);
    }

    /**
     * 添加
     */
    @ApiOperation(value = "${comments}新增", notes = "作者：${author}")
#if(${shiroAnnotation}==true)
    @RequiresPermissions("${moduleName}:${pathName}:create")
#end
    @PostMapping("")
    public ResponseEntity<${className}Dto> create(@Validated @RequestBody ${className}CreateParam param) {

		${className}Entity ${classname}Entity = ${classname}Service.create(param);
		if (${classname}Entity == null) {
			return ResponseEntity.error("添加失败");
		}
		
        ${className}Dto ${classname}Dto = ${classname}Entity.copyPropertiesTo(new ${className}Dto(), false);

        return ResponseEntity.success(${classname}Dto, "添加成功");

    }

    /**
     * 修改
     */
    @ApiOperation(value = "${comments}修改", notes = "作者：${author}")
#if(${shiroAnnotation}==true)
    @RequiresPermissions("${moduleName}:${pathName}:update")
#end
    @PutMapping("")
    public ResponseEntity<${className}Dto> update(@Validated @RequestBody ${className}UpdateParam param) {
		${className}Entity ${classname}Entity = ${classname}Service.update(param);
		if (${classname}Entity == null) {
			return ResponseEntity.error("修改失败");
		}

        ${className}Dto ${classname}Dto = ${classname}Entity.copyPropertiesTo(new ${className}Dto(), false);

        return ResponseEntity.success(${classname}Dto, "修改成功");

    }

    /**
     * 删除
     */
    @ApiOperation(value = "${comments}删除", notes = "作者：${author}")
#if(${shiroAnnotation}==true)
    @RequiresPermissions("${moduleName}:${pathName}:delete")
#end
    @DeleteMapping("/{${pk.attrname}}")
    public ResponseEntity<String> delete(@PathVariable("${pk.attrname}") ${pk.attrType} ${pk.attrname}) {

        ${classname}Service.removeById(${pk.attrname});

        return ResponseEntity.success("删除成功");
    }

}
