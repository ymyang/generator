package ${package}.${moduleName}.controller;

import java.util.List;

#if(${shiroAnnotation}==true)
import org.apache.shiro.authz.annotation.RequiresPermissions;
#end
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.baomidou.mybatisplus.core.metadata.IPage;

import ${package}.${moduleName}.dto.${className}Dto;
import ${package}.${moduleName}.entity.${className}Entity;
import ${package}.${moduleName}.param.${className}CreateParam;
import ${package}.${moduleName}.param.${className}QueryParam;
import ${package}.${moduleName}.param.${className}UpdateParam;
import ${package}.${moduleName}.service.${className}Service;
import cn.gigahome.common.ResponseEntity;
import cn.gigahome.common.web.PageResultDto;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;

/**
 * ${comments}
 *
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
@RestController
@RequestMapping("/${moduleName}/${pathName}")
@Api(value = "${comments}", tags = {"${comments}"})
public class ${className}Controller {

	@Autowired
	private ${className}Service ${classname}Service;

    /**
     * 列表
     */
    @GetMapping("/list")
    @ApiOperation("${comments}列表")
#if(${shiroAnnotation}==true)
    @RequiresPermissions("${moduleName}:${pathName}:list")
#end
    public ResponseEntity<PageResultDto<${className}Dto>> list(${className}QueryParam param) {
        IPage<${className}Entity> list = ${classname}Service.page(param);

        IPage<${className}Dto> result = list.convert((item) -> {
            ${className}Dto dto = new ${className}Dto();
            BeanUtils.copyProperties(item, dto);
            return dto;
        });

        return ResponseEntity.success(new PageResultDto<>(result));
    }

    /**
     * 详情
     */
    @GetMapping("/{${pk.attrname}}")
    @ApiOperation("${comments}详情")
#if(${shiroAnnotation}==true)
    @RequiresPermissions("${moduleName}:${pathName}:detail")
#end
    public ResponseEntity<${className}Dto> detail(@PathVariable("${pk.attrname}") ${pk.attrType} ${pk.attrname}) {
        ${className}Entity entity = ${classname}Service.get(${pk.attrname});
        if (entity == null) {
        	return ResponseEntity.error("未查询到此对象");
        }

        ${className}Dto dto = new ${className}Dto();
        BeanUtils.copyProperties(entity, dto);

        return ResponseEntity.success(dto);
    }

    /**
     * 添加
     */
    @PostMapping("")
    @ApiOperation("${comments}添加")
#if(${shiroAnnotation}==true)
    @RequiresPermissions("${moduleName}:${pathName}:create")
#end
    public ResponseEntity<${className}Dto> create(@Validated({${className}CreateParam.Create.class}) @RequestBody ${className}CreateParam param) {
		${className}Entity entity = ${classname}Service.create(param);
		if (entity == null) {
			return ResponseEntity.error("添加失败");
		}
		
        ${className}Dto dto = new ${className}Dto();
        BeanUtils.copyProperties(entity, dto);

        return ResponseEntity.success(dto);
    }

    /**
     * 修改
     */
    @PutMapping("")
    @ApiOperation("${comments}修改")
#if(${shiroAnnotation}==true)
    @RequiresPermissions("${moduleName}:${pathName}:update")
#end
    public ResponseEntity<${className}Dto> update(@Validated({${className}UpdateParam.Update.class}) @RequestBody ${className}UpdateParam param) {
		${className}Entity entity = ${classname}Service.update(param);
		if (entity == null) {
			return ResponseEntity.error("修改失败");
		}

        ${className}Dto dto = new ${className}Dto();
        BeanUtils.copyProperties(entity, dto);

        return ResponseEntity.success(dto);
    }

    /**
     * 删除
     */
    @PostMapping("/delete")
    @ApiOperation("${comments}删除")
#if(${shiroAnnotation}==true)
    @RequiresPermissions("${moduleName}:${pathName}:delete")
#end
    public ResponseEntity<String> delete(@RequestBody List<${pk.attrType}> ${pk.attrname}s) {
        ${classname}Service.delete(${pk.attrname}s);

        return ResponseEntity.success();
    }

}
